package com.dcoletto.sharedprefdao.editorimport android.content.Contextimport android.os.Buildimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.TextViewimport java.io.Fileclass SharedPrefFileAdapter(private val context: Context, private val applicationId: String): ListAdapter<File, SharedPrefFileAdapter.Holder>(Differ) {    var onItemClick: (File) -> Unit = {}    override fun onCreateViewHolder(p0: ViewGroup, p1: Int): Holder {        return LayoutInflater            .from(p0.context)            .inflate(R.layout.shared_pref_item, p0, false)            .let(::Holder)    }    override fun onBindViewHolder(holder: Holder, position: Int) {        holder.bind(getItem(position))    }    fun update() {        val dataDir = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {            context.dataDir        } else {            File("${context.filesDir}/${applicationId}")        }        File(dataDir, "shared_prefs")            .listFiles()            ?.filter { it.extension == "xml" }            ?.takeIf { it.isNotEmpty() }            ?.run { submitList(this) }    }    inner class Holder(v: View): RecyclerView.ViewHolder(v), View.OnClickListener {        private lateinit var item: File        private val keyView: TextView = v.findViewById(R.id.item_key)        private val valueView: TextView = v.findViewById(R.id.item_value)        init {            itemView.setOnClickListener(this)            valueView.visibility = View.GONE        }        override fun onClick(p0: View?) {            onItemClick(item)        }        fun bind(item: File) {            this.item = item            keyView.text = item.nameWithoutExtension        }    }    object Differ: DiffUtil.ItemCallback<File>() {        override fun areItemsTheSame(old: File, new: File): Boolean {            return old.absolutePath == new.absolutePath        }        override fun areContentsTheSame(old: File, new: File): Boolean {            return old.length() == new.length()        }    }}