package com.coletz.sharedprefdao.editorimport android.content.SharedPreferencesimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport android.widget.TextViewclass SharedPrefListAdapter(private val prefs: SharedPreferences): ListAdapter<SharedPrefItem, SharedPrefListAdapter.Holder>(Differ) {    var onItemClick: (SharedPrefItem) -> Unit = {}    var onItemLongPressed: (SharedPrefItem) -> Boolean = { false }    override fun onCreateViewHolder(p0: ViewGroup, p1: Int): Holder {        return LayoutInflater            .from(p0.context)            .inflate(R.layout.shared_pref_item, p0, false)            .let(::Holder)    }    override fun onBindViewHolder(holder: Holder, position: Int) {        holder.bind(getItem(position))    }    fun update() {        val nonNullPrefs: MutableMap<String, Any> = mutableMapOf()        prefs.all.forEach { (key, value) ->            if (value != null) {                nonNullPrefs[key] = value            } else {                prefs.edit().remove(key).apply()            }        }        nonNullPrefs            .toList()            .map { SharedPrefItem.Helper.fromPrefPair(it) }            .run { submitList(this) }    }    inner class Holder(v: View): RecyclerView.ViewHolder(v), View.OnClickListener, View.OnLongClickListener {        private lateinit var item: SharedPrefItem        private val keyView: TextView = v.findViewById(R.id.item_key)        private val valueView: TextView = v.findViewById(R.id.item_value)        init {            itemView.setOnClickListener(this)        }        fun bind(item: SharedPrefItem) {            this.item = item            keyView.text = item.key            valueView.text = item.value.toString()        }        override fun onClick(p0: View?) {            onItemClick(item)        }        override fun onLongClick(p0: View?): Boolean {            return onItemLongPressed(item)        }    }    object Differ: DiffUtil.ItemCallback<SharedPrefItem>() {        override fun areItemsTheSame(old: SharedPrefItem, new: SharedPrefItem): Boolean {            return old == new        }        override fun areContentsTheSame(old: SharedPrefItem, new: SharedPrefItem): Boolean {            val (oldType: SharedPrefType, oldKey: String, oldValue: Any) = old            val (newType: SharedPrefType, newKey: String, newValue: Any) = new            return when {                oldType != newType -> false                oldKey != newKey -> false                oldValue is Boolean && newValue is Boolean -> oldValue as Boolean == newValue as Boolean                oldValue is Float && newValue is Float -> oldValue as Float == newValue as Float                oldValue is Int && newValue is Int -> oldValue as Int == newValue as Int                oldValue is Long && newValue is Long -> oldValue as Long == newValue as Long                oldValue is String && newValue is String -> oldValue as String == newValue as String                oldValue is Set<*> && newValue is Set<*> -> oldValue as Set<*> == newValue as Set<*>                else -> false            }        }    }}